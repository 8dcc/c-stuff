; Generated by bf2nasm
; https://github.com/8dcc/scratch
;
; Assemble and link with:
;   nasm -f elf64 -o file.o file.asm
;   gcc -o file.out file.o
default rel
bits 64

section .bss
heap: resb 1024

section .text
extern putchar:function
extern getchar:function
extern exit:function

global main
main:
    xor     rax, rax
    xor     rax, rax
    lea     rcx, [rel heap]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
.lbl0:
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
.lbl1:
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    dec     rcx
    dec     rcx
    dec     rcx
    dec     rcx
    dec     byte [rcx]
    cmp     byte [rcx], 0
    jnz     .lbl1
    inc     rcx
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    inc     rcx
    dec     byte [rcx]
    inc     rcx
    inc     rcx
    inc     byte [rcx]
.lbl2:
    dec     rcx
    cmp     byte [rcx], 0
    jnz     .lbl2
    dec     rcx
    dec     byte [rcx]
    cmp     byte [rcx], 0
    jnz     .lbl0
    inc     rcx
    inc     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     rcx
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     rcx
    inc     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    dec     rcx
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    dec     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     rcx
    inc     rcx
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar wrt ..plt
    pop     rcx
    mov     rdi, 0
    call    exit wrt ..plt
