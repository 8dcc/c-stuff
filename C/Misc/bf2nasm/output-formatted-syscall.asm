; Generated by bf2nasm
; https://github.com/8dcc/scratch
;
; Assemble and link with:
;   nasm -f elf64 -o file.o file.asm
;   ld -m elf_x86_64 -o file.out file.o
default rel
bits 64

section .bss
heap: resb 1024

section .text

global putchar
putchar:
    push    rdi
    mov     rax, 4
    mov     rdi, 1
    mov     rsi, rsp
    mov     rdx, 1
    int     0x80
    add     rsp, 8
    ret

global getchar
getchar:
    sub     rsp, 8
    mov     rax, 3
    mov     rdi, 0
    mov     rsi, rsp
    mov     rdx, 1
    int     0x80
    add     rsp, 8
    ret

global exit
exit:
    mov     rax, 1
    mov     rdi, 0
    int     0x80

global _start
_start:
    xor     rax, rax
    xor     rax, rax
    lea     rcx, [rel heap]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
.lbl0:
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
.lbl1:
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    dec     rcx
    dec     rcx
    dec     rcx
    dec     rcx
    dec     byte [rcx]
    cmp     byte [rcx], 0
    jnz     .lbl1
    inc     rcx
    inc     byte [rcx]
    inc     rcx
    inc     byte [rcx]
    inc     rcx
    dec     byte [rcx]
    inc     rcx
    inc     rcx
    inc     byte [rcx]
.lbl2:
    dec     rcx
    cmp     byte [rcx], 0
    jnz     .lbl2
    dec     rcx
    dec     byte [rcx]
    cmp     byte [rcx], 0
    jnz     .lbl0
    inc     rcx
    inc     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     rcx
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     rcx
    inc     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    dec     rcx
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    dec     rcx
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    dec     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     rcx
    inc     rcx
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    inc     rcx
    inc     byte [rcx]
    inc     byte [rcx]
    push    rcx
    mov     rdi, [rcx]
    call    putchar
    pop     rcx
    mov     rdi, 0
    call    exit
