#+TITLE: Floating point modulus in Scheme
#+AUTHOR: 8dcc
#+OPTIONS: toc:2
#+STARTUP: nofold
#+PROPERTY: header-args:scheme :tangle fmod.scm
#+PROPERTY: header-args:C      :tangle fmod.c

* Introduction

When writing [[file:../color-palettes/README.org][my color palettes code]], I noticed that Scheme doesn't support a
floating point modulus operation, it only supports integers. I wanted to make a
function that worked similar to =mod= in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-mod][Emacs Lisp]].

There is a cleaner version of all this in my [[https://8dcc.github.io/programming/fmod.html][blog]].

* The recursive Scheme version

I started with this simple function that supports only positive values.

#+begin_src scheme
;; Calculate remainder of X by Y. Supports floating point, but only positive
;; values.
(define (fmod x y)
  (if (< x y)
      x
      (fmod (- x y) y)))
#+end_src

Then, after a very non-mathematical approach, I came up with this version, that
supports both positive and negative values. See also [[file:../../../LaTeX/math/math.pdf][my math notes]].

#+begin_src scheme
;; Calculate remainder of X by Y, supporting floating point and negative values.
(define (fmod x y)
  ;; Calculate remainder of X by Y, as long as they are both positive.
  (define (fmod-positive x y)
    (if (< x y)
        x
        (fmod-positive (- x y) y)))

  ;; If X is negative: X mod Y = Y - (|X| mod Y)
  (define (fmod-y-positive x y)
    (if (< x 0)
        (- y (fmod-positive (- x) y))
        (fmod-positive x y)))

  ;; If X is negative: X mod Y = -(-X mod -Y)
  (if (< y 0)
      (- (fmod-y-positive (- x) (- y)))
      (fmod-y-positive x y)))
#+end_src

However, after reading the Emacs source code, I came up with this
not-so-different version that does some unnecessary calculations but uses the
Emacs way. To understand =c-fmod=, see [[*The iterative C version][the iterative C version]].

#+begin_src scheme
;; Calculate remainder of X by Y, supporting floating point and negative values.
(define (fmod x y)
  ;; Equivalent function to fmod() from C's math.h
  (define (c-fmod x y)
    (let ((abs-x (abs x))
          (abs-y (abs y)))
      (if (< abs-x abs-y)
          x
          (let ((abs-result (c-fmod (- abs-x abs-y) abs-y)))
            (if (< x 0)
                (- abs-result)
                abs-result)))))

  (let ((result (c-fmod x y)))
    (if (or (and (< y 0) (> result 0))
            (and (>= y 0) (< result 0)))
        (+ result y)
        result)))
#+end_src

Then, after observing the outputs a bit more, I came up with an even better
version.

| X    | Y    | Result |
|------+------+--------|
| 9.5  | 2.5  | 2.0    |
| 9.5  | -2.5 | -0.5   |
| -9.5 | 2.5  | 0.5    |
| -9.5 | -2.5 | -2.0   |

We can see that the output changes depending on the input signs. Here, ~AbsMod~
represents the modulus of $|x|$ and $|y|$.

| X        | Y        | Result           |
|----------+----------+------------------|
| Positive | Positive | ~AbsMod(x, y)~     |
| Positive | Negative | ~y + AbsMod(x, y)~ |
| Negative | Positive | ~y - AbsMod(x, y)~ |
| Negative | Negative | ~-AbsMod(x, y)~    |

With this in mind, an even better version can be written.

#+begin_src scheme
;; Calculate remainder of X by Y, supporting floating point and negative values.
(define (fmod x y)
  ;; Calculate remainder of X by Y, as long as they are both positive.
  (define (fmod-positive x y)
    (if (< x y)
        x
        (fmod-positive (- x y) y)))

  (let ((abs-result (fmod-positive (abs x) (abs y))))
    (cond ((and (positive? x) (positive? y))
           abs-result)
          ((and (positive? x) (negative? y))
           (+ y abs-result))
          ((and (negative? x) (positive? y))
           (- y abs-result))
          ((and (negative? x) (negative? y))
           (- abs-result)))))
#+end_src

Some examples using any of my Scheme functions:

#+begin_src scheme :results verbatim
(list
 (fmod 9 4)
 (fmod 9 -4)
 (fmod -9 4)
 (fmod -9 -4)
 (fmod 9.5 2.5)
 (fmod 9.5 -2.5)
 (fmod -9.5 2.5)
 (fmod -9.5 -2.5))
#+end_src

#+RESULTS:
: (1 -3 3 -1 2.0 -0.5 0.5 -2.0)

Those same examples using =mod= in Emacs Lisp:

#+begin_src emacs-lisp :results verbatim
(list
 (mod 9 4)
 (mod 9 -4)
 (mod -9 4)
 (mod -9 -4)
 (mod 9.5 2.5)
 (mod 9.5 -2.5)
 (mod -9.5 2.5)
 (mod -9.5 -2.5))
#+end_src

#+RESULTS:
: (1 -3 3 -1 2.0 -0.5 0.5 -2.0)

* The iterative C version

This initial version behaves like =fmod= from =math.h=, but it's slightly different
from Emacs' =mod=.

#+begin_src C :main no
#include <math.h>

double my_fmod(double x, double y) {
    int bNegativeResult = x < 0;

    x = fabs(x);
    y = fabs(y);

    while (x >= y)
        x -= y;

    return bNegativeResult ? -x : x;
}
#+end_src

This next function does behave like Emacs' =mod= by adding a simple conditional to
the previous function. Credits for this very smart method: [[https://github.com/emacs-mirror/emacs/blob/2119cd52cdb58221a850360bf65c91cf3bf4b47e/src/floatfns.c#L569-L582][emacs source code]].

#+begin_src C :main no
double my_emacs_fmod(double x, double y) {
    x = my_fmod(x, y);

    /* If the "remainder" comes out with the wrong sign, fix it. */
    if (y < 0 ? x > 0 : x < 0)
        x += y;

    return x;
}
#+end_src

We can make a third optimized version similar to the one I wrote in Scheme.

#+begin_src C :main no
double my_emacs_fmod2(double x, double y) {
    double abs_x = fabs(x);
    double abs_y = fabs(y);

    /* Calculate fmod(fabs(x), fabs(y)) */
    double abs_result = abs_x;
    while (abs_result >= abs_y)
        abs_result -= abs_y;

    /*
     ,* if (x >= 0 && y >= 0)
     ,*     return abs_result;
     ,* if (x >= 0 && y < 0)
     ,*     return y + abs_result;
     ,* if (x < 0 && y >= 0)
     ,*     return y - abs_result;
     ,* if (x < 0 && y < 0)
     ,*     return -abs_result;
     ,*/

    return (x >= 0) ? ((y >= 0) ? abs_result : y + abs_result)
                    : ((y >= 0) ? y - abs_result : -abs_result);
}
#+end_src

We can test our functions against =fmod= from =math.h=. Remember to link with =-lm=.

#+begin_src C
#include <stdio.h>

int main(void) {
    printf("my_fmod(9, 4)       -> %.2f\n", my_fmod(9, 4));
    printf("my_fmod(9, -4)      -> %.2f\n", my_fmod(9, -4));
    printf("my_fmod(-9, 4)      -> %.2f\n", my_fmod(-9, 4));
    printf("my_fmod(-9, -4)     -> %.2f\n", my_fmod(-9, -4));
    printf("my_fmod(9.5, 2.5)   -> %.2f\n", my_fmod(9.5, 2.5));
    printf("my_fmod(9.5, -2.5)  -> %.2f\n", my_fmod(9.5, -2.5));
    printf("my_fmod(-9.5, 2.5)  -> %.2f\n", my_fmod(-9.5, 2.5));
    printf("my_fmod(-9.5, -2.5) -> %.2f\n", my_fmod(-9.5, -2.5));
    putchar('\n');
    printf("fmod(9, 4)       -> %.2f\n", fmod(9, 4));
    printf("fmod(9, -4)      -> %.2f\n", fmod(9, -4));
    printf("fmod(-9, 4)      -> %.2f\n", fmod(-9, 4));
    printf("fmod(-9, -4)     -> %.2f\n", fmod(-9, -4));
    printf("fmod(9.5, 2.5)   -> %.2f\n", fmod(9.5, 2.5));
    printf("fmod(9.5, -2.5)  -> %.2f\n", fmod(9.5, -2.5));
    printf("fmod(-9.5, 2.5)  -> %.2f\n", fmod(-9.5, 2.5));
    printf("fmod(-9.5, -2.5) -> %.2f\n", fmod(-9.5, -2.5));
    putchar('\n');
    printf("my_emacs_fmod(9, 4)       -> %.2f\n", my_emacs_fmod(9, 4));
    printf("my_emacs_fmod(9, -4)      -> %.2f\n", my_emacs_fmod(9, -4));
    printf("my_emacs_fmod(-9, 4)      -> %.2f\n", my_emacs_fmod(-9, 4));
    printf("my_emacs_fmod(-9, -4)     -> %.2f\n", my_emacs_fmod(-9, -4));
    printf("my_emacs_fmod(9.5, 2.5)   -> %.2f\n", my_emacs_fmod(9.5, 2.5));
    printf("my_emacs_fmod(9.5, -2.5)  -> %.2f\n", my_emacs_fmod(9.5, -2.5));
    printf("my_emacs_fmod(-9.5, 2.5)  -> %.2f\n", my_emacs_fmod(-9.5, 2.5));
    printf("my_emacs_fmod(-9.5, -2.5) -> %.2f\n", my_emacs_fmod(-9.5, -2.5));
    putchar('\n');
    printf("my_emacs_fmod2(9, 4)       -> %.2f\n", my_emacs_fmod2(9, 4));
    printf("my_emacs_fmod2(9, -4)      -> %.2f\n", my_emacs_fmod2(9, -4));
    printf("my_emacs_fmod2(-9, 4)      -> %.2f\n", my_emacs_fmod2(-9, 4));
    printf("my_emacs_fmod2(-9, -4)     -> %.2f\n", my_emacs_fmod2(-9, -4));
    printf("my_emacs_fmod2(9.5, 2.5)   -> %.2f\n", my_emacs_fmod2(9.5, 2.5));
    printf("my_emacs_fmod2(9.5, -2.5)  -> %.2f\n", my_emacs_fmod2(9.5, -2.5));
    printf("my_emacs_fmod2(-9.5, 2.5)  -> %.2f\n", my_emacs_fmod2(-9.5, 2.5));
    printf("my_emacs_fmod2(-9.5, -2.5) -> %.2f\n", my_emacs_fmod2(-9.5, -2.5));

    return 0;
}
#+end_src
