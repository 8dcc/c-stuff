#+TITLE: Color palettes
#+AUTHOR: 8dcc
#+OPTIONS: toc:2
#+STARTUP: nofold
#+PROPERTY: header-args:scheme :tangle color-palettes.scm

* Introduction

This was inspired by [[https://jacobwsmith.xyz/stories/color_schemes.html][Jacob Smith's great article]] about mathematically generating
color palettes. His original python source can be found in [[https://github.com/jsmit42/color_palettes][this repository]].

See also my [[file:../color-conversion/README.org][color conversion]] functions for converting between RGB and HSV.

* Generating palettes

Given a color in HSV format, these functions return different color palettes.

** Monochrome

This one, for example, changes the *value* component (lightness/intensity) of the
HSV color to generate a color palette of variable size.

#+begin_src scheme
;; Generate a color palette of N elements, scaling the lightness by STEP, having
;; HSV color in the middle. The STEP must be in the [0..1] range.
(define (palette-monochrome hsv size step)
  (define (scale-lightness hsv scale)
    (list (car hsv)
          (cadr hsv)
          (* (caddr hsv) (+ 1 scale))))

  (cond ((<= size 1)
         (list hsv))
        ((= size 2)
         (list hsv (scale-lightness hsv step)))
        (#t
         (let ((rounded-size (if (odd? size) (- size 1) size)))
           (append (list (scale-lightness hsv (* step (/ rounded-size 2) -1)))
                   (palette-monochrome hsv (- size 2) step)
                   (list (scale-lightness hsv (* step (/ rounded-size 2)))))))))

(palette-monochrome '(240 100 70) 5 0.10)
#+end_src

#+RESULTS:
| 240 | 100 | 56.0 |
| 240 | 100 | 63.0 |
| 240 | 100 |   70 |
| 240 | 100 | 77.0 |
| 240 | 100 | 84.0 |

This is the result: [[https://coolors.co/00008f-0000a1-0000b3-0000c4-0000d6][Link]].

** Higher order function

The following function takes another function, =func=, and generates a palette by
calling it with the relative position of each color.

In this example, it generates a monochrome palette.

#+begin_src scheme
;; Generate a color palette of N elements, having HSV color in the middle. For
;; each color in the palette, the base color along with an index relative to the
;; center of the palette will be passed to the provided FUNC.
(define (palette-generator hsv size func)
  (cond ((<= size 1)
         (list (func hsv 0)))
        ((= size 2)
         (list (func hsv 0)
               (func hsv 1)))
        (#t
         (let* ((rounded-size (if (odd? size) (- size 1) size)))
           (append (list (func hsv (* -1 (/ rounded-size 2))))
                   (palette-generator hsv (- size 2) func)
                   (list (func hsv (/ rounded-size 2))))))))

(palette-generator '(240 100 70) 5
                   (lambda (hsv relative-idx)
                     (define scale-step 0.10)
                     (list (car hsv)
                           (cadr hsv)
                           (* (caddr hsv)
                              (+ 1 (* relative-idx scale-step))))))
#+end_src

#+RESULTS:
| 240 | 100 | 56.0 |
| 240 | 100 | 63.0 |
| 240 | 100 | 70.0 |
| 240 | 100 | 77.0 |
| 240 | 100 | 84.0 |


#+begin_comment
TODO: Finish the following.
  - Analagous Colors
  - Complimentary Colors
  - Triadic Colors
  - Tetradic Colors
  - Split Complimentary Colors

TODO: Make a generalized function that takes another =modify= function and applies
that to the color depending on the color position in the palette. The =modify=
function should receive the position and scale it's behavior accordingly.
#+end_comment
