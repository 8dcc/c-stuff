#+TITLE: Color palettes
#+AUTHOR: 8dcc
#+OPTIONS: toc:2
#+STARTUP: nofold
#+PROPERTY: header-args:scheme :tangle color-palettes.scm

* Introduction

This was inspired by [[https://jacobwsmith.xyz/stories/color_schemes.html][Jacob Smith's great article]] about mathematically generating
color palettes. His original python source can be found in [[https://github.com/jsmit42/color_palettes][this repository]].

See also my [[file:../color-conversion/README.org][color conversion]] functions for converting between RGB and HSV.

* Generating palettes

Given a color in HSV format, these functions return different color palettes.

** Initial monochrome approach

This first function, changes the *value* component (lightness/intensity) of the
HSV color to generate a color palette of variable size.

#+begin_src scheme
;; Generate a color palette of N elements, scaling the lightness by STEP, having
;; HSV color in the middle. The STEP must be in the [0..1] range.
(define (palette-monochrome hsv size step)
  (define (scale-lightness hsv scale)
    (list (car hsv)
          (cadr hsv)
          (* (caddr hsv) (+ 1 scale))))

  (cond ((<= size 1)
         (list hsv))
        ((= size 2)
         (list hsv (scale-lightness hsv step)))
        (#t
         (let ((rounded-size (if (odd? size) (- size 1) size)))
           (append (list (scale-lightness hsv (* step (/ rounded-size 2) -1)))
                   (palette-monochrome hsv (- size 2) step)
                   (list (scale-lightness hsv (* step (/ rounded-size 2)))))))))

(palette-monochrome '(240 100 70) 5 0.10)
#+end_src

#+RESULTS:
| 240 | 100 | 56.0 |
| 240 | 100 | 63.0 |
| 240 | 100 | 70.0 |
| 240 | 100 | 77.0 |
| 240 | 100 | 84.0 |

This is the result: [[https://coolors.co/00008f-0000a1-0000b3-0000c4-0000d6][Link]].

00e6e6-001a1a-001c1c
https://coolors.co/

** Higher order function

After writing the first function, however, I realized that this could be done in
a more functional way, so I wrote this other [[https://en.wikipedia.org/wiki/Higher-order_function][higher-order function]]. It takes
another function, =func=, and generates a palette by calling it with the index of
each color relative to the center of the palette.

#+begin_src scheme
;; Generate a color palette of N elements, having HSV color in the middle. For
;; each color in the palette, the base color along with an index relative to the
;; center of the palette will be passed to the provided FUNC.
(define (palette-generator hsv size func)
  (cond ((<= size 1)
         (list (func hsv 0)))
        ((= size 2)
         (list (func hsv 0)
               (func hsv 1)))
        (#t
         (let* ((rounded-size (if (odd? size) (- size 1) size)))
           (append (list (func hsv (* -1 (/ rounded-size 2))))
                   (palette-generator hsv (- size 2) func)
                   (list (func hsv (/ rounded-size 2))))))))
#+end_src

The passed function, in this case a =lambda=, will receive the original HSV color
and the index relative to the middle of the palette. The index 0 will be the
original color in the middle, the index -1 will be the

In this example, it generates the same monochrome palette as before.

#+begin_src scheme
(palette-generator '(240 100 70) 5
                   (lambda (hsv relative-idx)
                     (define scale-step 0.10)
                     (list (car hsv)
                           (cadr hsv)
                           (* (caddr hsv)
                              (+ 1 (* relative-idx scale-step))))))
#+end_src

#+RESULTS:
| 240 | 100 | 56.0 |
| 240 | 100 | 63.0 |
| 240 | 100 | 70.0 |
| 240 | 100 | 77.0 |
| 240 | 100 | 84.0 |

** Analagous Colors

First, this =add-degrees= function is needed to make sure we don't overflow the
360 hue degrees. For more information on =fmod=, see [[file:../fmod/README.org][the folder in this repo]] and
my [[https://8dcc.github.io/programming/fmod.html][blog article]].

#+begin_src scheme
(define (add-degrees hsv degrees)
  (define (fmod x y)
    (if (< x y)
        x
        (fmod (- x y) y)))

  (list (fmod (+ (car hsv) degrees)
              360.0)
        (cadr hsv)
        (caddr hsv)))
#+end_src

We use the =palette-generator= function from [[*Higher order function][before]], and we pass the lambda that
will actually generate the analagous colors (by calling the =add-degrees= function
we declared just now).

#+begin_src scheme
(palette-generator '(240 100 100) 5
                   (lambda (hsv relative-idx)
                     (define degree-difference 30.0)
                     (add-degrees hsv (* relative-idx degree-difference))))
#+end_src

#+RESULTS:
| 180.0 | 100 | 100 |
| 210.0 | 100 | 100 |
| 240.0 | 100 | 100 |
| 270.0 | 100 | 100 |
| 300.0 | 100 | 100 |

We could map this output to our previous monochrome function to generate
different shades of these colors.

#+begin_src scheme
(map (lambda (hsv)
       (palette-monochrome hsv 3 0.10))
     '((180 100 100)
       (210 100 100)
       (240 100 100)
       (270 100 100)
       (300 100 100)))
#+end_src

#+RESULTS:
| (180 100 90.0) | (180 100 100) | (180 100 110) |
| (210 100 90.0) | (210 100 100) | (210 100 110) |
| (240 100 90.0) | (240 100 100) | (240 100 110) |
| (270 100 90.0) | (270 100 100) | (270 100 110) |
| (300 100 90.0) | (300 100 100) | (300 100 110) |

#+begin_comment
TODO: Finish the following.
  - Complimentary Colors
  - Triadic Colors
  - Tetradic Colors
  - Split Complimentary Colors

TODO: Make a generalized function that takes another =modify= function and applies
that to the color depending on the color position in the palette. The =modify=
function should receive the position and scale it's behavior accordingly.
#+end_comment
